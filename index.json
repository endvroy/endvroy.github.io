[{"authors":null,"categories":null,"content":"Learned chord and rhythm representations can be swapped directly for controlled generation. Disentanglement is enforced by introducing auxiliary tasks.\n","date":1583384400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583384400,"objectID":"da75873c4e3dbba91857e7ee75001b9a","permalink":"/projects/music_gen/","publishdate":"2020-03-05T00:00:00-05:00","relpermalink":"/projects/music_gen/","section":"projects","summary":"Disentangled Music Generation with VAE","tags":["machine learning","generative models"],"title":"Polyphonic Music Generation","type":"projects"},{"authors":null,"categories":null,"content":"Recast the alternating update of the generator and discriminator as Gibbs sampling, then use that to extended Bayesian GAN to multiple component cases (e.g. adversarial autoencoders). The resulting theoretical framework also applies to follow-up works like ProbGAN.\n","date":1575522000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575522000,"objectID":"9e1bf4651efb823eae9ecefa27b2c251","permalink":"/projects/bayesian_gan/","publishdate":"2019-12-05T00:00:00-05:00","relpermalink":"/projects/bayesian_gan/","section":"projects","summary":"Generalize Bayesian GAN to Adversarial Autoencoders","tags":["machine learning","generative models"],"title":"Generalized Bayesian GAN","type":"projects"},{"authors":null,"categories":null,"content":"Collected 240k labeled data from the GTA game by coding a mod, then Trained with U-Net with perceptual loss\n","date":1575522000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575522000,"objectID":"5390d3fa411fb4330261fbfb0c3f7907","permalink":"/projects/landscape_relighting/","publishdate":"2019-12-05T00:00:00-05:00","relpermalink":"/projects/landscape_relighting/","section":"projects","summary":"Change a landscape photo to how it should look like at a different time of the day","tags":["machine learning","generative models"],"title":"Landscape Relighting","type":"projects"},{"authors":null,"categories":null,"content":"Beat the state-of-art on the Django dataset\n","date":1544418000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1544418000,"objectID":"2b33344db8a5e7862910d05275d314a9","permalink":"/projects/code_gen/","publishdate":"2018-12-10T00:00:00-05:00","relpermalink":"/projects/code_gen/","section":"projects","summary":"General-purpose code generation from natural language descriptions with a grammar-agnostic model","tags":["program synthesis","machine learning","natural language processing"],"title":"Code Generation from NL","type":"projects"},{"authors":null,"categories":null,"content":"In this project, I investigated how well stochastic superoptimization can be migrated to a different architecture. Stochastic superiotimization uses Markov Chain Monte Carlo (MCMC) to sample to program space, using a cost function to guide the sampling process. Human Resource Machine is a game about assembly programming. The architecture operates with one-address code, only one register, one input/output stream and limited memory. The project is efficiently implemented in Rust.\n","date":1530417600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530417600,"objectID":"814557940850ca640ef56f5e58aba23c","permalink":"/projects/stoke/","publishdate":"2018-07-01T00:00:00-04:00","relpermalink":"/projects/stoke/","section":"projects","summary":"[Stochastic superoptimization](http://stoke.stanford.edu/) for the [Human Resource Machine](https://tomorrowcorporation.com/humanresourcemachine) architecture.","tags":["program synthesis","superoptimization"],"title":"STOKE for HRM","type":"projects"},{"authors":null,"categories":null,"content":"","date":1512709200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1512709200,"objectID":"e5b5aada9a4483f23a318bd03f0fb8c6","permalink":"/projects/superhuman/","publishdate":"2017-12-08T00:00:00-05:00","relpermalink":"/projects/superhuman/","section":"projects","summary":"Enumerative superoptimizer for the game Human Resource Machine","tags":["program synthesis","superoptimization"],"title":"SuperHuman","type":"projects"},{"authors":null,"categories":null,"content":"","date":1512450000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1512450000,"objectID":"4c8bf79782597eec08ae235bbee3a136","permalink":"/projects/web_tetris/","publishdate":"2017-12-05T00:00:00-05:00","relpermalink":"/projects/web_tetris/","section":"projects","summary":"multiplayer duelling Tetris match in a browser","tags":["web development","web app","websocket","flask"],"title":"WebTetris","type":"projects"},{"authors":null,"categories":null,"content":"","date":1508040000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1508040000,"objectID":"cabcaceed0598e4ce35c7513a3e5334f","permalink":"/projects/buffer-overflow-detector/","publishdate":"2017-10-15T00:00:00-04:00","relpermalink":"/projects/buffer-overflow-detector/","section":"projects","summary":"Detecting potential buffer overflow with dataflow analysis","tags":["program analysis","dataflow analysis"],"title":"Buffer Overflow Detector","type":"projects"},{"authors":null,"categories":null,"content":"","date":1506830400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1506830400,"objectID":"4e49074f669beae7928700e363fbaf70","permalink":"/projects/efficient_path_profiler/","publishdate":"2017-10-01T00:00:00-04:00","relpermalink":"/projects/efficient_path_profiler/","section":"projects","summary":"Collecting dynamic call graphs with LLVM","tags":["program analysis"],"title":"Efficient Path Profiler","type":"projects"},{"authors":null,"categories":null,"content":"","date":1505534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1505534400,"objectID":"7f36f4a1aa2788e4ac360f34bb32d6f2","permalink":"/projects/call_graph_profiler/","publishdate":"2017-09-16T00:00:00-04:00","relpermalink":"/projects/call_graph_profiler/","section":"projects","summary":"Collecting path frequency information for acyclic functions with LLVM","tags":["program analysis"],"title":"Call Graph Profiler","type":"projects"},{"authors":null,"categories":null,"content":"","date":1504065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1504065600,"objectID":"cb8ee16cc4153dea1d9eb85c16f2926b","permalink":"/projects/linguist/","publishdate":"2017-08-30T00:00:00-04:00","relpermalink":"/projects/linguist/","section":"projects","summary":"LALR(1) compiler-compiler that is built upon itself","tags":["compiler"],"title":"Linguist","type":"projects"},{"authors":null,"categories":null,"content":"","date":1486098000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1486098000,"objectID":"ad82144dab8ac644fdcdc9d3b2beb2d4","permalink":"/projects/my_shell/","publishdate":"2017-02-03T00:00:00-05:00","relpermalink":"/projects/my_shell/","section":"projects","summary":"A simple shell that supports pipelining, background execution and job control","tags":["shell","os"],"title":"my shell","type":"projects"},{"authors":null,"categories":null,"content":"","date":1485320400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1485320400,"objectID":"0178a024256f8c0ef9e562bd98eb1e34","permalink":"/projects/minisql/","publishdate":"2017-01-25T00:00:00-05:00","relpermalink":"/projects/minisql/","section":"projects","summary":"Minimal Database Engine","tags":["database"],"title":"MiniSQL","type":"projects"}]