[{"authors":null,"categories":null,"content":"details will be revealed after the review process\n","date":1544428800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1544428800,"objectID":"2b33344db8a5e7862910d05275d314a9","permalink":"/projects/code_gen/","publishdate":"2018-12-10T00:00:00-08:00","relpermalink":"/projects/code_gen/","section":"projects","summary":"General-purpose code generation from natural language descriptions with a grammar-agnostic model","tags":["program synthesis","machine learning","natural language processing"],"title":"Code Generation from NL","type":"projects"},{"authors":null,"categories":null,"content":"details will be revealed after the review process\n","date":1544428800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1544428800,"objectID":"fdb14898b4e4086295d6802fd9e8ad3f","permalink":"/projects/hybrid_npi/","publishdate":"2018-12-10T00:00:00-08:00","relpermalink":"/projects/hybrid_npi/","section":"projects","summary":"Training Neural Programmer-Interpreters with a backpropagation-reinforcement hybrid training method","tags":["program induction","machine learning","reinforcement learning"],"title":"Hybrid Training Neural Programmer-Interpreters","type":"projects"},{"authors":null,"categories":null,"content":"In this project, I investigated how well stochastic superoptimization can be migrated to a different architecture. Stochastic superiotimization uses Markov Chain Monte Carlo (MCMC) to sample to program space, using a cost function to guide the sampling process. Human Resource Machine is a game about assembly programming. The architecture operates with one-address code, only one register, one input/output stream and limited memory. The project is efficiently implemented in Rust.\n","date":1530428400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530428400,"objectID":"814557940850ca640ef56f5e58aba23c","permalink":"/projects/stoke/","publishdate":"2018-07-01T00:00:00-07:00","relpermalink":"/projects/stoke/","section":"projects","summary":"[Stochastic superoptimization](http://stoke.stanford.edu/) for the [Human Resource Machine](https://tomorrowcorporation.com/humanresourcemachine) architecture.","tags":["program synthesis","superoptimization"],"title":"STOKE for HRM","type":"projects"},{"authors":null,"categories":null,"content":"","date":1512460800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1512460800,"objectID":"4c8bf79782597eec08ae235bbee3a136","permalink":"/projects/web_tetris/","publishdate":"2017-12-05T00:00:00-08:00","relpermalink":"/projects/web_tetris/","section":"projects","summary":"multiplayer duelling Tetris match in a browser","tags":["web development","web app","websocket","flask"],"title":"WebTetris","type":"projects"},{"authors":null,"categories":null,"content":"","date":1508050800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1508050800,"objectID":"cabcaceed0598e4ce35c7513a3e5334f","permalink":"/projects/buffer-overflow-detector/","publishdate":"2017-10-15T00:00:00-07:00","relpermalink":"/projects/buffer-overflow-detector/","section":"projects","summary":"Detecting potential buffer overflow with dataflow analysis","tags":["program analysis","dataflow analysis"],"title":"Buffer Overflow Detector","type":"projects"},{"authors":null,"categories":null,"content":"","date":1506841200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1506841200,"objectID":"4e49074f669beae7928700e363fbaf70","permalink":"/projects/efficient_path_profiler/","publishdate":"2017-10-01T00:00:00-07:00","relpermalink":"/projects/efficient_path_profiler/","section":"projects","summary":"Collecting dynamic call graphs with LLVM","tags":["program analysis"],"title":"Efficient Path Profiler","type":"projects"},{"authors":null,"categories":null,"content":"","date":1505545200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1505545200,"objectID":"7f36f4a1aa2788e4ac360f34bb32d6f2","permalink":"/projects/call_graph_profiler/","publishdate":"2017-09-16T00:00:00-07:00","relpermalink":"/projects/call_graph_profiler/","section":"projects","summary":"Collecting path frequency information for acyclic functions with LLVM","tags":["program analysis"],"title":"Call Graph Profiler","type":"projects"},{"authors":null,"categories":null,"content":"","date":1504076400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1504076400,"objectID":"cb8ee16cc4153dea1d9eb85c16f2926b","permalink":"/projects/linguist/","publishdate":"2017-08-30T00:00:00-07:00","relpermalink":"/projects/linguist/","section":"projects","summary":"LALR(1) compiler-compiler that is built upon itself","tags":["compiler"],"title":"Linguist","type":"projects"},{"authors":null,"categories":null,"content":"","date":1486108800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1486108800,"objectID":"ad82144dab8ac644fdcdc9d3b2beb2d4","permalink":"/projects/my_shell/","publishdate":"2017-02-03T00:00:00-08:00","relpermalink":"/projects/my_shell/","section":"projects","summary":"A simple shell that supports pipelining, background execution and job control","tags":["shell","os"],"title":"my shell","type":"projects"},{"authors":null,"categories":null,"content":"","date":1485331200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1485331200,"objectID":"0178a024256f8c0ef9e562bd98eb1e34","permalink":"/projects/minisql/","publishdate":"2017-01-25T00:00:00-08:00","relpermalink":"/projects/minisql/","section":"projects","summary":"Minimal Database Engine","tags":["database"],"title":"MiniSQL","type":"projects"}]